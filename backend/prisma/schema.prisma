// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
// ------------------------------------------------------
// üîê AUTHENTICA√á√ÉO E CONTROLE DE ACESSO
// ------------------------------------------------------

model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  isMaster      Boolean        @default(false)  // define o usu√°rio principal do sistema
  roleId        Int?           
  role          Role?          @relation(fields: [roleId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sessions      Session[]
  auditLogs     AuditLog[]
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id           Int       @id @default(autoincrement())
  token        String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  revoked      Boolean   @default(false)
}


model Role {
  id             Int            @id @default(autoincrement())
  name           String          @unique
  description    String?
  permissions    RolePermission[]
  users          User[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String            @unique // ex: "CREATE_USER", "VIEW_REPORTS"
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id             Int           @id @default(autoincrement())
  roleId         Int
  permissionId   Int
  role           Role          @relation(fields: [roleId], references: [id])
  permission     Permission    @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Session {
  id          Int        @id @default(autoincrement())
  userId      Int
  token       String      @unique
  createdAt   DateTime    @default(now())
  expiresAt   DateTime
  user        User        @relation(fields: [userId], references: [id])
}

// Logs de auditoria (quem fez o qu√™ e quando)
model AuditLog {
  id          Int        @id @default(autoincrement())
  userId      Int?
  action      String
  entity      String?
  entityId    Int?
  timestamp   DateTime   @default(now())
  details     String?
  user        User?       @relation(fields: [userId], references: [id])
}