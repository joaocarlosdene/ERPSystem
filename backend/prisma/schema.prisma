// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
// ------------------------------------------------------
// üîê AUTHENTICA√á√ÉO E CONTROLE DE ACESSO
// ------------------------------------------------------

model User {
  id            String           @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  isMaster      Boolean       @default(false) // define o usu√°rio principal do sistema
  roles         Role[]        @relation("UserRoles") // rela√ß√£o muitos-para-muitos
  tasks         UserTask[] // rela√ß√£o N:N com Task
  calendars     Calendar[] // calend√°rios criados pelo usu√°rio
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  sessions      Session[]
  auditLogs     AuditLog[]
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id           String       @id @default(cuid())
  token        String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  revoked      Boolean   @default(false)
}


model Role {
  id          String        @id @default(cuid())
  name        String         @unique
  active    Boolean  @default(true)
  description String?
  canAccessDashboard Boolean @default(false)
  users       User[]         @relation("UserRoles") // rela√ß√£o muitos-para-muitos
}


// ------------------------------------------------------
// üîê CALENDARIO, TASKS E PRIORIDADES DE TASKS
// ------------------------------------------------------
model Calendar {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  tasks     Task[]
  createdAt DateTime @default(now())
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  date        DateTime
  priority    Priority   @default(MEDIUM)
  color       String     // ex: "#FF0000" ou "bg-red-500"
  calendarId  String
  calendar    Calendar   @relation(fields: [calendarId], references: [id])
  users       UserTask[] // usu√°rios atribu√≠dos √† tarefa
  createdAt   DateTime   @default(now())
}

model UserTask {
  userId String
  taskId String
  user   User @relation(fields: [userId], references: [id])
  task   Task @relation(fields: [taskId], references: [id])
  @@id([userId, taskId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}


model Session {
  id          String        @id @default(cuid())
  userId      String
  token       String      @unique
  createdAt   DateTime    @default(now())
  expiresAt   DateTime
  user        User        @relation(fields: [userId], references: [id])
}

// Logs de auditoria (quem fez o qu√™ e quando)
model AuditLog {
  id          String        @id @default(cuid())
  userId      String?
  action      String
  entity      String?
  entityId    Int?
  timestamp   DateTime   @default(now())
  details     String?
  user        User?       @relation(fields: [userId], references: [id])
}